{"version":3,"sources":["../../src/folders/addFolderCollections.ts"],"sourcesContent":["import type { Config } from '../config/types.js'\nimport type { CollectionSlug } from '../index.js'\n\nimport { createFolderCollection } from './createFolderCollection.js'\n\nexport async function addFolderCollections(config: NonNullable<Config>): Promise<void> {\n  if (!config.collections) {\n    return\n  }\n\n  const enabledCollectionSlugs: CollectionSlug[] = []\n  const debug = Boolean(config?.folders?.debug)\n  const folderFieldName = config?.folders?.fieldName as unknown as string\n  const folderSlug = config?.folders?.slug as unknown as CollectionSlug\n\n  for (let i = 0; i < config.collections.length; i++) {\n    const collection = config.collections[i]\n    if (collection && collection?.folders) {\n      collection.fields.push({\n        name: folderFieldName,\n        type: 'relationship',\n        admin: {\n          allowCreate: false,\n          allowEdit: false,\n          components: {\n            Cell: '@payloadcms/ui/rsc#FolderTableCell',\n            Field: '@payloadcms/ui/rsc#FolderEditField',\n          },\n        },\n        index: true,\n        label: 'Folder',\n        relationTo: folderSlug,\n      })\n      enabledCollectionSlugs.push(collection.slug)\n    }\n  }\n\n  if (enabledCollectionSlugs.length) {\n    let folderCollection = createFolderCollection({\n      slug: folderSlug,\n      collectionSlugs: enabledCollectionSlugs,\n      debug,\n      folderFieldName,\n    })\n\n    if (\n      Array.isArray(config?.folders?.collectionOverrides) &&\n      config?.folders.collectionOverrides.length\n    ) {\n      for (const override of config.folders.collectionOverrides) {\n        folderCollection = await override({ collection: folderCollection })\n      }\n    }\n    config.collections.push(folderCollection)\n  }\n}\n"],"names":["createFolderCollection","addFolderCollections","config","collections","enabledCollectionSlugs","debug","Boolean","folders","folderFieldName","fieldName","folderSlug","slug","i","length","collection","fields","push","name","type","admin","allowCreate","allowEdit","components","Cell","Field","index","label","relationTo","folderCollection","collectionSlugs","Array","isArray","collectionOverrides","override"],"mappings":"AAGA,SAASA,sBAAsB,QAAQ,8BAA6B;AAEpE,OAAO,eAAeC,qBAAqBC,MAA2B;IACpE,IAAI,CAACA,OAAOC,WAAW,EAAE;QACvB;IACF;IAEA,MAAMC,yBAA2C,EAAE;IACnD,MAAMC,QAAQC,QAAQJ,QAAQK,SAASF;IACvC,MAAMG,kBAAkBN,QAAQK,SAASE;IACzC,MAAMC,aAAaR,QAAQK,SAASI;IAEpC,IAAK,IAAIC,IAAI,GAAGA,IAAIV,OAAOC,WAAW,CAACU,MAAM,EAAED,IAAK;QAClD,MAAME,aAAaZ,OAAOC,WAAW,CAACS,EAAE;QACxC,IAAIE,cAAcA,YAAYP,SAAS;YACrCO,WAAWC,MAAM,CAACC,IAAI,CAAC;gBACrBC,MAAMT;gBACNU,MAAM;gBACNC,OAAO;oBACLC,aAAa;oBACbC,WAAW;oBACXC,YAAY;wBACVC,MAAM;wBACNC,OAAO;oBACT;gBACF;gBACAC,OAAO;gBACPC,OAAO;gBACPC,YAAYjB;YACd;YACAN,uBAAuBY,IAAI,CAACF,WAAWH,IAAI;QAC7C;IACF;IAEA,IAAIP,uBAAuBS,MAAM,EAAE;QACjC,IAAIe,mBAAmB5B,uBAAuB;YAC5CW,MAAMD;YACNmB,iBAAiBzB;YACjBC;YACAG;QACF;QAEA,IACEsB,MAAMC,OAAO,CAAC7B,QAAQK,SAASyB,wBAC/B9B,QAAQK,QAAQyB,oBAAoBnB,QACpC;YACA,KAAK,MAAMoB,YAAY/B,OAAOK,OAAO,CAACyB,mBAAmB,CAAE;gBACzDJ,mBAAmB,MAAMK,SAAS;oBAAEnB,YAAYc;gBAAiB;YACnE;QACF;QACA1B,OAAOC,WAAW,CAACa,IAAI,CAACY;IAC1B;AACF"}