{"version":3,"sources":["../../../src/folders/utils/getFolderData.ts"],"sourcesContent":["import type { CollectionSlug } from '../../index.js'\nimport type { PayloadRequest } from '../../types/index.js'\nimport type { GetFolderDataResult } from '../types.js'\n\nimport { parseDocumentID } from '../../index.js'\nimport { getFolderBreadcrumbs } from './getFolderBreadcrumbs.js'\nimport { queryDocumentsAndFoldersFromJoin } from './getFoldersAndDocumentsFromJoin.js'\nimport { getOrphanedDocs } from './getOrphanedDocs.js'\n\ntype Args = {\n  /**\n   * Specify to query documents from a specific collection\n   * @default undefined\n   * @example 'posts'\n   */\n  collectionSlug?: CollectionSlug\n  /**\n   * The ID of the folder to query documents from\n   * @default undefined\n   */\n  folderID?: number | string\n  req: PayloadRequest\n  /**\n   * Search term to filter documents by - only applicable IF `collectionSlug` exists and NO `folderID` is provided\n   */\n  search?: string\n}\n/**\n * Query for documents, subfolders and breadcrumbs for a given folder\n */\nexport const getFolderData = async ({\n  collectionSlug,\n  folderID: _folderID,\n  req,\n  search,\n}: Args): Promise<GetFolderDataResult> => {\n  const { payload, user } = req\n  const parentFolderID = parseDocumentID({\n    id: _folderID,\n    collectionSlug: payload.config.folders.slug,\n    payload,\n  })\n\n  const breadcrumbsPromise = getFolderBreadcrumbs({\n    folderID: parentFolderID,\n    req,\n  })\n\n  if (parentFolderID) {\n    // subfolders and documents are queried together\n    const documentAndSubfolderPromise = queryDocumentsAndFoldersFromJoin({\n      collectionSlug,\n      parentFolderID,\n      req,\n    })\n    const [breadcrumbs, documentsAndSubfolders] = await Promise.all([\n      breadcrumbsPromise,\n      documentAndSubfolderPromise,\n    ])\n\n    return {\n      breadcrumbs,\n      documents: documentsAndSubfolders.documents,\n      subfolders: documentsAndSubfolders.subfolders,\n    }\n  } else {\n    // subfolders and documents are queried separately\n    const subfoldersPromise = getOrphanedDocs({\n      collectionSlug: payload.config.folders.slug,\n      req,\n      search,\n    })\n    const documentsPromise = collectionSlug\n      ? getOrphanedDocs({\n          collectionSlug,\n          req,\n          search,\n        })\n      : Promise.resolve([])\n    const [breadcrumbs, subfolders, documents] = await Promise.all([\n      breadcrumbsPromise,\n      subfoldersPromise,\n      documentsPromise,\n    ])\n    return {\n      breadcrumbs,\n      documents,\n      subfolders,\n    }\n  }\n}\n"],"names":["parseDocumentID","getFolderBreadcrumbs","queryDocumentsAndFoldersFromJoin","getOrphanedDocs","getFolderData","collectionSlug","folderID","_folderID","req","search","payload","user","parentFolderID","id","config","folders","slug","breadcrumbsPromise","documentAndSubfolderPromise","breadcrumbs","documentsAndSubfolders","Promise","all","documents","subfolders","subfoldersPromise","documentsPromise","resolve"],"mappings":"AAIA,SAASA,eAAe,QAAQ,iBAAgB;AAChD,SAASC,oBAAoB,QAAQ,4BAA2B;AAChE,SAASC,gCAAgC,QAAQ,sCAAqC;AACtF,SAASC,eAAe,QAAQ,uBAAsB;AAoBtD;;CAEC,GACD,OAAO,MAAMC,gBAAgB,OAAO,EAClCC,cAAc,EACdC,UAAUC,SAAS,EACnBC,GAAG,EACHC,MAAM,EACD;IACL,MAAM,EAAEC,OAAO,EAAEC,IAAI,EAAE,GAAGH;IAC1B,MAAMI,iBAAiBZ,gBAAgB;QACrCa,IAAIN;QACJF,gBAAgBK,QAAQI,MAAM,CAACC,OAAO,CAACC,IAAI;QAC3CN;IACF;IAEA,MAAMO,qBAAqBhB,qBAAqB;QAC9CK,UAAUM;QACVJ;IACF;IAEA,IAAII,gBAAgB;QAClB,gDAAgD;QAChD,MAAMM,8BAA8BhB,iCAAiC;YACnEG;YACAO;YACAJ;QACF;QACA,MAAM,CAACW,aAAaC,uBAAuB,GAAG,MAAMC,QAAQC,GAAG,CAAC;YAC9DL;YACAC;SACD;QAED,OAAO;YACLC;YACAI,WAAWH,uBAAuBG,SAAS;YAC3CC,YAAYJ,uBAAuBI,UAAU;QAC/C;IACF,OAAO;QACL,kDAAkD;QAClD,MAAMC,oBAAoBtB,gBAAgB;YACxCE,gBAAgBK,QAAQI,MAAM,CAACC,OAAO,CAACC,IAAI;YAC3CR;YACAC;QACF;QACA,MAAMiB,mBAAmBrB,iBACrBF,gBAAgB;YACdE;YACAG;YACAC;QACF,KACAY,QAAQM,OAAO,CAAC,EAAE;QACtB,MAAM,CAACR,aAAaK,YAAYD,UAAU,GAAG,MAAMF,QAAQC,GAAG,CAAC;YAC7DL;YACAQ;YACAC;SACD;QACD,OAAO;YACLP;YACAI;YACAC;QACF;IACF;AACF,EAAC"}