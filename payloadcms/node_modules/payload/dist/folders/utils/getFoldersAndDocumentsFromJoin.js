import { formatFolderOrDocumentItem } from './formatFolderOrDocumentItem.js';
export async function queryDocumentsAndFoldersFromJoin({ collectionSlug, parentFolderID, req }) {
    const { payload, user } = req;
    const folderCollectionSlugs = payload.config.collections.reduce((acc, collection)=>{
        if (collection?.folders) {
            acc.push(collection.slug);
        }
        return acc;
    }, []);
    const subfolderDoc = await payload.find({
        collection: payload.config.folders.slug,
        joins: {
            documentsAndFolders: {
                limit: 100_000,
                sort: 'name',
                where: {
                    relationTo: {
                        in: [
                            payload.config.folders.slug,
                            ...collectionSlug ? [
                                collectionSlug
                            ] : folderCollectionSlugs
                        ]
                    }
                }
            }
        },
        limit: 1,
        overrideAccess: false,
        req,
        user,
        where: {
            id: {
                equals: parentFolderID
            }
        }
    });
    const childrenDocs = subfolderDoc?.docs[0]?.documentsAndFolders?.docs || [];
    const results = childrenDocs.reduce((acc, doc)=>{
        const { relationTo, value } = doc;
        const item = formatFolderOrDocumentItem({
            folderFieldName: payload.config.folders.fieldName,
            isUpload: Boolean(payload.collections[relationTo].config.upload),
            relationTo,
            useAsTitle: payload.collections[relationTo].config.admin?.useAsTitle,
            value
        });
        if (relationTo === payload.config.folders.slug) {
            acc.subfolders.push(item);
        } else {
            acc.documents.push(item);
        }
        return acc;
    }, {
        documents: [],
        subfolders: []
    });
    return results;
}

//# sourceMappingURL=getFoldersAndDocumentsFromJoin.js.map